// Auto-generated by generate_ts.go. DO NOT EDIT.

// --- Constants ---
export const Joe: number = 4;

export const PlantWsCalibrationHistory: string = "calibration_history";

export const PlantWsCalibration: string = "calibration_moisture";

export const PlantWsReading: string = "reading";

export const PlantWsInfo: string = "info";

export const PlantWsError: string = "error";


// --- Interfaces ---
// SummaryStats Intent is to put these on the first/main page
export interface SummaryStats {
  // Number that we know about
  total_plants: number;
  total_devices: number;
  total_sensors: number;
  // Total that is "enabled" meaning it hasn't been manually deactivated.
  // If a plant is deactivated, it won't have any valid info in the database
  total_enabled_plants: number;
  total_enabled_devices: number;
  total_enabled_sensors: number;
  // The number that have reported in within the past 24 hours
  total_active_plants: number;
  total_active_devices: number;
  total_active_sensors: number;
}

// SensorIssue represents a sensor that might need attention
export interface SensorIssue {
  sensor: SensorDetail;
  device?: Device;
  reason: string;
  last_moisture_percent: number;
}

// SummaryResponse is the response struct for the summary API
export interface SummaryResponse {
  stats: SummaryStats;
  low_moisture_sensors?: (Sensor)[] | null;
  sensor_issues?: (SensorIssue)[] | null;
  has_issues: boolean;
}

// Plant represents the plants table in the database
export interface Plant {
  id: number;
  name: string;
  adoption_date?: string;
  propagation_parent_id?: number;
  last_repot_date?: string;
  light_hours_per_day?: number;
  pot_size_cm?: number;
  sensor_id?: number;
  image_path: string;
  location_room: string;
  location_stand: string;
  location_shelf_num?: number;
  is_enabled: boolean;
  water_when_under_pct?: number;
  stop_watering_when_pct?: number;
  too_much_water_pct?: number;
  botanical_name: string;
  light_lux_min?: number;
  light_lux_max?: number;
  light_duration_min_hrs?: number;
  light_duration_max_hrs?: number;
  preferred_humidity_min_pct?: number;
  preferred_humidity_max_pct?: number;
  should_use_distilled_water: boolean;
  needs_more_attention: boolean;
  notes: string;
}

export interface PlantDetails extends Plant {
  // Plant           Plant           `json:"plant"`
  sensor?: Sensor;
  last_moisture?: SensorMoisture;
  since_last_seen?: number;
  device_name?: (IdName)[] | null;
}

export interface SensorHistory {
  id: number;
  timestamp: string;
  sensor_id: number;
  raw_value?: number;
  value?: number;
  min_raw_val?: number;
  max_raw_val?: number;
}

export interface SensorCharts {
  sensor: Sensor;
  sensor_history?: (SensorHistory)[] | null;
}

export interface SensorMoisture {
  timestamp: string;
  value: number;
}

export interface SensorMoistureHistory {
  sensor_brief: IdName;
  history?: (SensorMoisture)[] | null;
}

// Sensor represents the sensor table in the database
export interface Sensor {
  id: number;
  device_id: number;
  type_and_num: string;
  name: string;
  added: string;
  last_seen: string;
  units: string;
  min_raw_val: number;
  max_raw_val: number;
  model: string;
  is_enabled: boolean;
  raw_val: number;
}

export interface SensorDetail {
  sensor: Sensor;
  latest_sensor_stats?: SensorHistory;
  since_last_seen?: number;
  plants_brief?: (IdName)[] | null;
  device?: Device;
}

// Device represents each device in the devices table in the database
// A device can be connected to a parent device, it can also have multiple sensors
export interface Device {
  id: number;
  added?: string;
  last_seen?: string;
  mac_address?: string;
  hop_from_mac?: number;
  name: string;
  hardware_id?: bigint;
  parent_hardware_id?: bigint;
  location_room?: string;
  location_stand?: string;
  location_shelf_num?: number;
  is_enabled?: boolean;
  model?: string;
}

export interface ServiceInfo {
  name: string;
  address: string;
  category: string;
  icon: string;
  tagline: string;
  description: string;
  status: string;
  expanded: boolean;
}

// IdName Represents a Unique ID for queries and a user friendly name for display
export interface IdName {
  id: number;
  name: string;
}

export interface DeviceHistory {
  id: number;
  timestamp: string;
  device_id: number;
  cpu_temp_c?: number;
  rssi_db?: number;
}

export interface DeviceDetail {
  device: Device;
  latest_device_stats?: DeviceHistory;
  parent_brief?: IdName;
  since_last_seen?: number;
  attached_sensors?: (Sensor)[] | null;
}

export interface WsComms {
  type: string;
}

export interface CalibrationMessage extends WsComms {
  message: string;
  value?: number;
}

export interface CalibrationData extends WsComms {
  timestamp: bigint;
  moisture: number;
  raw_value: number;
  sensor_max_raw: number;
  sensor_min_raw: number;
}

export interface HistoricalData extends WsComms {
  historical?: (CalibrationData)[] | null;
}

